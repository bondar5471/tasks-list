// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`DaysContainer component shallow renders without crashing 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <DaysContainer />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <CalendarHeatmap
          classForValue={[Function]}
          endDate={2019-12-31T00:00:00.000Z}
          gutterSize={1}
          horizontal={true}
          monthLabels={
            Array [
              "Jan",
              "Feb",
              "Mar",
              "Apr",
              "May",
              "Jun",
              "Jul",
              "Aug",
              "Sep",
              "Oct",
              "Nov",
              "Dec",
            ]
          }
          numDays={null}
          onClick={[Function]}
          onMouseLeave={null}
          onMouseOver={null}
          showMonthLabels={true}
          showOutOfRangeDays={false}
          showWeekdayLabels={false}
          startDate={2018-12-31T00:00:00.000Z}
          titleForValue={null}
          tooltipDataAttrs={[Function]}
          transformDayElement={null}
          values={Array []}
          weekdayLabels={
            Array [
              "",
              "Mon",
              "",
              "Wed",
              "",
              "Fri",
              "",
            ]
          }
        />,
        <ReactTooltip
          insecure={true}
          resizeHide={true}
          wrapper="div"
        />,
        <Modal
          ariaHideApp={true}
          bodyOpenClassName="ReactModal__Body--open"
          closeTimeoutMS={0}
          contentLabel="Modal"
          isOpen={false}
          onAfterOpen={[Function]}
          onRequestClose={[Function]}
          parentSelector={[Function]}
          portalClassName="ReactModalPortal"
          role="dialog"
          shouldCloseOnEsc={true}
          shouldCloseOnOverlayClick={true}
          shouldFocusAfterRender={true}
          shouldReturnFocusAfterClose={true}
          style={
            Object {
              "content": Object {
                "bottom": "auto",
                "left": "50%",
                "marginRight": "-50%",
                "right": "auto",
                "top": "50%",
                "transform": "translate(-50%, -50%)",
              },
            }
          }
        >
          <span
            onClick={[Function]}
          >
            <span
              className="close warp black"
            />
          </span>
          <h2>
            Invalid date
          </h2>
          <div>
            edit this day
          </div>
          <div
            className="editDay"
          >
            <form
              onSubmit={[Function]}
            >
              <ForwardRef(Bootstrap(FormGroup))>
                <ForwardRef(ContextTransform)
                  autoFocus={true}
                  id="report"
                  onChange={[Function]}
                  placeholder=""
                  type="texy"
                />
              </ForwardRef(Bootstrap(FormGroup))>
              <ForwardRef(Bootstrap(FormGroup))>
                <label
                  className="successfulLabel"
                >
                  <input
                    className="successfulCheck"
                    onChange={[Function]}
                    type="checkbox"
                  />
                  successful day
                </label>
              </ForwardRef(Bootstrap(FormGroup))>
              <ForwardRef(Bootstrap(Button))
                block={true}
                type="submit"
              >
                Edit
              </ForwardRef(Bootstrap(Button))>
            </form>
          </div>
        </Modal>,
      ],
      "className": "calendar-heatmap calendar",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "classForValue": [Function],
          "endDate": 2019-12-31T00:00:00.000Z,
          "gutterSize": 1,
          "horizontal": true,
          "monthLabels": Array [
            "Jan",
            "Feb",
            "Mar",
            "Apr",
            "May",
            "Jun",
            "Jul",
            "Aug",
            "Sep",
            "Oct",
            "Nov",
            "Dec",
          ],
          "numDays": null,
          "onClick": [Function],
          "onMouseLeave": null,
          "onMouseOver": null,
          "showMonthLabels": true,
          "showOutOfRangeDays": false,
          "showWeekdayLabels": false,
          "startDate": 2018-12-31T00:00:00.000Z,
          "titleForValue": null,
          "tooltipDataAttrs": [Function],
          "transformDayElement": null,
          "values": Array [],
          "weekdayLabels": Array [
            "",
            "Mon",
            "",
            "Wed",
            "",
            "Fri",
            "",
          ],
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "insecure": true,
          "resizeHide": true,
          "wrapper": "div",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "ariaHideApp": true,
          "bodyOpenClassName": "ReactModal__Body--open",
          "children": Array [
            <span
              onClick={[Function]}
            >
              <span
                className="close warp black"
              />
            </span>,
            <h2>
              Invalid date
            </h2>,
            <div>
              edit this day
            </div>,
            <div
              className="editDay"
            >
              <form
                onSubmit={[Function]}
              >
                <ForwardRef(Bootstrap(FormGroup))>
                  <ForwardRef(ContextTransform)
                    autoFocus={true}
                    id="report"
                    onChange={[Function]}
                    placeholder=""
                    type="texy"
                  />
                </ForwardRef(Bootstrap(FormGroup))>
                <ForwardRef(Bootstrap(FormGroup))>
                  <label
                    className="successfulLabel"
                  >
                    <input
                      className="successfulCheck"
                      onChange={[Function]}
                      type="checkbox"
                    />
                    successful day
                  </label>
                </ForwardRef(Bootstrap(FormGroup))>
                <ForwardRef(Bootstrap(Button))
                  block={true}
                  type="submit"
                >
                  Edit
                </ForwardRef(Bootstrap(Button))>
              </form>
            </div>,
          ],
          "closeTimeoutMS": 0,
          "contentLabel": "Modal",
          "isOpen": false,
          "onAfterOpen": [Function],
          "onRequestClose": [Function],
          "parentSelector": [Function],
          "portalClassName": "ReactModalPortal",
          "role": "dialog",
          "shouldCloseOnEsc": true,
          "shouldCloseOnOverlayClick": true,
          "shouldFocusAfterRender": true,
          "shouldReturnFocusAfterClose": true,
          "style": Object {
            "content": Object {
              "bottom": "auto",
              "left": "50%",
              "marginRight": "-50%",
              "right": "auto",
              "top": "50%",
              "transform": "translate(-50%, -50%)",
            },
          },
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <span
                className="close warp black"
              />,
              "onClick": [Function],
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "className": "close warp black",
              },
              "ref": null,
              "rendered": null,
              "type": "span",
            },
            "type": "span",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Invalid date",
            },
            "ref": [Function],
            "rendered": "Invalid date",
            "type": "h2",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "edit this day",
            },
            "ref": null,
            "rendered": "edit this day",
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <form
                onSubmit={[Function]}
              >
                <ForwardRef(Bootstrap(FormGroup))>
                  <ForwardRef(ContextTransform)
                    autoFocus={true}
                    id="report"
                    onChange={[Function]}
                    placeholder=""
                    type="texy"
                  />
                </ForwardRef(Bootstrap(FormGroup))>
                <ForwardRef(Bootstrap(FormGroup))>
                  <label
                    className="successfulLabel"
                  >
                    <input
                      className="successfulCheck"
                      onChange={[Function]}
                      type="checkbox"
                    />
                    successful day
                  </label>
                </ForwardRef(Bootstrap(FormGroup))>
                <ForwardRef(Bootstrap(Button))
                  block={true}
                  type="submit"
                >
                  Edit
                </ForwardRef(Bootstrap(Button))>
              </form>,
              "className": "editDay",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <ForwardRef(Bootstrap(FormGroup))>
                    <ForwardRef(ContextTransform)
                      autoFocus={true}
                      id="report"
                      onChange={[Function]}
                      placeholder=""
                      type="texy"
                    />
                  </ForwardRef(Bootstrap(FormGroup))>,
                  <ForwardRef(Bootstrap(FormGroup))>
                    <label
                      className="successfulLabel"
                    >
                      <input
                        className="successfulCheck"
                        onChange={[Function]}
                        type="checkbox"
                      />
                      successful day
                    </label>
                  </ForwardRef(Bootstrap(FormGroup))>,
                  <ForwardRef(Bootstrap(Button))
                    block={true}
                    type="submit"
                  >
                    Edit
                  </ForwardRef(Bootstrap(Button))>,
                ],
                "onSubmit": [Function],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": <ForwardRef(ContextTransform)
                      autoFocus={true}
                      id="report"
                      onChange={[Function]}
                      placeholder=""
                      type="texy"
                    />,
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": "",
                    "nodeType": "function",
                    "props": Object {
                      "autoFocus": true,
                      "id": "report",
                      "onChange": [Function],
                      "placeholder": "",
                      "type": "texy",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "Feedback": [Function],
                      "defaultProps": undefined,
                      "propTypes": undefined,
                      "render": [Function],
                    },
                  },
                  "type": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "defaultProps": undefined,
                    "propTypes": undefined,
                    "render": [Function],
                  },
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": <label
                      className="successfulLabel"
                    >
                      <input
                        className="successfulCheck"
                        onChange={[Function]}
                        type="checkbox"
                      />
                      successful day
                    </label>,
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": Array [
                        <input
                          className="successfulCheck"
                          onChange={[Function]}
                          type="checkbox"
                        />,
                        "successful day",
                      ],
                      "className": "successfulLabel",
                    },
                    "ref": null,
                    "rendered": Array [
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "className": "successfulCheck",
                          "onChange": [Function],
                          "type": "checkbox",
                        },
                        "ref": null,
                        "rendered": null,
                        "type": "input",
                      },
                      "successful day",
                    ],
                    "type": "label",
                  },
                  "type": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "defaultProps": undefined,
                    "propTypes": undefined,
                    "render": [Function],
                  },
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "block": true,
                    "children": "Edit",
                    "type": "submit",
                  },
                  "ref": null,
                  "rendered": "Edit",
                  "type": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "defaultProps": undefined,
                    "propTypes": undefined,
                    "render": [Function],
                  },
                },
              ],
              "type": "form",
            },
            "type": "div",
          },
        ],
        "type": [Function],
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <CalendarHeatmap
            classForValue={[Function]}
            endDate={2019-12-31T00:00:00.000Z}
            gutterSize={1}
            horizontal={true}
            monthLabels={
              Array [
                "Jan",
                "Feb",
                "Mar",
                "Apr",
                "May",
                "Jun",
                "Jul",
                "Aug",
                "Sep",
                "Oct",
                "Nov",
                "Dec",
              ]
            }
            numDays={null}
            onClick={[Function]}
            onMouseLeave={null}
            onMouseOver={null}
            showMonthLabels={true}
            showOutOfRangeDays={false}
            showWeekdayLabels={false}
            startDate={2018-12-31T00:00:00.000Z}
            titleForValue={null}
            tooltipDataAttrs={[Function]}
            transformDayElement={null}
            values={Array []}
            weekdayLabels={
              Array [
                "",
                "Mon",
                "",
                "Wed",
                "",
                "Fri",
                "",
              ]
            }
          />,
          <ReactTooltip
            insecure={true}
            resizeHide={true}
            wrapper="div"
          />,
          <Modal
            ariaHideApp={true}
            bodyOpenClassName="ReactModal__Body--open"
            closeTimeoutMS={0}
            contentLabel="Modal"
            isOpen={false}
            onAfterOpen={[Function]}
            onRequestClose={[Function]}
            parentSelector={[Function]}
            portalClassName="ReactModalPortal"
            role="dialog"
            shouldCloseOnEsc={true}
            shouldCloseOnOverlayClick={true}
            shouldFocusAfterRender={true}
            shouldReturnFocusAfterClose={true}
            style={
              Object {
                "content": Object {
                  "bottom": "auto",
                  "left": "50%",
                  "marginRight": "-50%",
                  "right": "auto",
                  "top": "50%",
                  "transform": "translate(-50%, -50%)",
                },
              }
            }
          >
            <span
              onClick={[Function]}
            >
              <span
                className="close warp black"
              />
            </span>
            <h2>
              Invalid date
            </h2>
            <div>
              edit this day
            </div>
            <div
              className="editDay"
            >
              <form
                onSubmit={[Function]}
              >
                <ForwardRef(Bootstrap(FormGroup))>
                  <ForwardRef(ContextTransform)
                    autoFocus={true}
                    id="report"
                    onChange={[Function]}
                    placeholder=""
                    type="texy"
                  />
                </ForwardRef(Bootstrap(FormGroup))>
                <ForwardRef(Bootstrap(FormGroup))>
                  <label
                    className="successfulLabel"
                  >
                    <input
                      className="successfulCheck"
                      onChange={[Function]}
                      type="checkbox"
                    />
                    successful day
                  </label>
                </ForwardRef(Bootstrap(FormGroup))>
                <ForwardRef(Bootstrap(Button))
                  block={true}
                  type="submit"
                >
                  Edit
                </ForwardRef(Bootstrap(Button))>
              </form>
            </div>
          </Modal>,
        ],
        "className": "calendar-heatmap calendar",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "classForValue": [Function],
            "endDate": 2019-12-31T00:00:00.000Z,
            "gutterSize": 1,
            "horizontal": true,
            "monthLabels": Array [
              "Jan",
              "Feb",
              "Mar",
              "Apr",
              "May",
              "Jun",
              "Jul",
              "Aug",
              "Sep",
              "Oct",
              "Nov",
              "Dec",
            ],
            "numDays": null,
            "onClick": [Function],
            "onMouseLeave": null,
            "onMouseOver": null,
            "showMonthLabels": true,
            "showOutOfRangeDays": false,
            "showWeekdayLabels": false,
            "startDate": 2018-12-31T00:00:00.000Z,
            "titleForValue": null,
            "tooltipDataAttrs": [Function],
            "transformDayElement": null,
            "values": Array [],
            "weekdayLabels": Array [
              "",
              "Mon",
              "",
              "Wed",
              "",
              "Fri",
              "",
            ],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "insecure": true,
            "resizeHide": true,
            "wrapper": "div",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "ariaHideApp": true,
            "bodyOpenClassName": "ReactModal__Body--open",
            "children": Array [
              <span
                onClick={[Function]}
              >
                <span
                  className="close warp black"
                />
              </span>,
              <h2>
                Invalid date
              </h2>,
              <div>
                edit this day
              </div>,
              <div
                className="editDay"
              >
                <form
                  onSubmit={[Function]}
                >
                  <ForwardRef(Bootstrap(FormGroup))>
                    <ForwardRef(ContextTransform)
                      autoFocus={true}
                      id="report"
                      onChange={[Function]}
                      placeholder=""
                      type="texy"
                    />
                  </ForwardRef(Bootstrap(FormGroup))>
                  <ForwardRef(Bootstrap(FormGroup))>
                    <label
                      className="successfulLabel"
                    >
                      <input
                        className="successfulCheck"
                        onChange={[Function]}
                        type="checkbox"
                      />
                      successful day
                    </label>
                  </ForwardRef(Bootstrap(FormGroup))>
                  <ForwardRef(Bootstrap(Button))
                    block={true}
                    type="submit"
                  >
                    Edit
                  </ForwardRef(Bootstrap(Button))>
                </form>
              </div>,
            ],
            "closeTimeoutMS": 0,
            "contentLabel": "Modal",
            "isOpen": false,
            "onAfterOpen": [Function],
            "onRequestClose": [Function],
            "parentSelector": [Function],
            "portalClassName": "ReactModalPortal",
            "role": "dialog",
            "shouldCloseOnEsc": true,
            "shouldCloseOnOverlayClick": true,
            "shouldFocusAfterRender": true,
            "shouldReturnFocusAfterClose": true,
            "style": Object {
              "content": Object {
                "bottom": "auto",
                "left": "50%",
                "marginRight": "-50%",
                "right": "auto",
                "top": "50%",
                "transform": "translate(-50%, -50%)",
              },
            },
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <span
                  className="close warp black"
                />,
                "onClick": [Function],
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "className": "close warp black",
                },
                "ref": null,
                "rendered": null,
                "type": "span",
              },
              "type": "span",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Invalid date",
              },
              "ref": [Function],
              "rendered": "Invalid date",
              "type": "h2",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "edit this day",
              },
              "ref": null,
              "rendered": "edit this day",
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <form
                  onSubmit={[Function]}
                >
                  <ForwardRef(Bootstrap(FormGroup))>
                    <ForwardRef(ContextTransform)
                      autoFocus={true}
                      id="report"
                      onChange={[Function]}
                      placeholder=""
                      type="texy"
                    />
                  </ForwardRef(Bootstrap(FormGroup))>
                  <ForwardRef(Bootstrap(FormGroup))>
                    <label
                      className="successfulLabel"
                    >
                      <input
                        className="successfulCheck"
                        onChange={[Function]}
                        type="checkbox"
                      />
                      successful day
                    </label>
                  </ForwardRef(Bootstrap(FormGroup))>
                  <ForwardRef(Bootstrap(Button))
                    block={true}
                    type="submit"
                  >
                    Edit
                  </ForwardRef(Bootstrap(Button))>
                </form>,
                "className": "editDay",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <ForwardRef(Bootstrap(FormGroup))>
                      <ForwardRef(ContextTransform)
                        autoFocus={true}
                        id="report"
                        onChange={[Function]}
                        placeholder=""
                        type="texy"
                      />
                    </ForwardRef(Bootstrap(FormGroup))>,
                    <ForwardRef(Bootstrap(FormGroup))>
                      <label
                        className="successfulLabel"
                      >
                        <input
                          className="successfulCheck"
                          onChange={[Function]}
                          type="checkbox"
                        />
                        successful day
                      </label>
                    </ForwardRef(Bootstrap(FormGroup))>,
                    <ForwardRef(Bootstrap(Button))
                      block={true}
                      type="submit"
                    >
                      Edit
                    </ForwardRef(Bootstrap(Button))>,
                  ],
                  "onSubmit": [Function],
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "children": <ForwardRef(ContextTransform)
                        autoFocus={true}
                        id="report"
                        onChange={[Function]}
                        placeholder=""
                        type="texy"
                      />,
                    },
                    "ref": null,
                    "rendered": Object {
                      "instance": null,
                      "key": "",
                      "nodeType": "function",
                      "props": Object {
                        "autoFocus": true,
                        "id": "report",
                        "onChange": [Function],
                        "placeholder": "",
                        "type": "texy",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "Feedback": [Function],
                        "defaultProps": undefined,
                        "propTypes": undefined,
                        "render": [Function],
                      },
                    },
                    "type": Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "defaultProps": undefined,
                      "propTypes": undefined,
                      "render": [Function],
                    },
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "children": <label
                        className="successfulLabel"
                      >
                        <input
                          className="successfulCheck"
                          onChange={[Function]}
                          type="checkbox"
                        />
                        successful day
                      </label>,
                    },
                    "ref": null,
                    "rendered": Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": Array [
                          <input
                            className="successfulCheck"
                            onChange={[Function]}
                            type="checkbox"
                          />,
                          "successful day",
                        ],
                        "className": "successfulLabel",
                      },
                      "ref": null,
                      "rendered": Array [
                        Object {
                          "instance": null,
                          "key": undefined,
                          "nodeType": "host",
                          "props": Object {
                            "className": "successfulCheck",
                            "onChange": [Function],
                            "type": "checkbox",
                          },
                          "ref": null,
                          "rendered": null,
                          "type": "input",
                        },
                        "successful day",
                      ],
                      "type": "label",
                    },
                    "type": Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "defaultProps": undefined,
                      "propTypes": undefined,
                      "render": [Function],
                    },
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "block": true,
                      "children": "Edit",
                      "type": "submit",
                    },
                    "ref": null,
                    "rendered": "Edit",
                    "type": Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "defaultProps": undefined,
                      "propTypes": undefined,
                      "render": [Function],
                    },
                  },
                ],
                "type": "form",
              },
              "type": "div",
            },
          ],
          "type": [Function],
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;
